/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SistemaLoja.view.atualizacao.cliente;

import SistemaLoja.view.cadastro.cliente.*;
import SistemaLoja.database.conexao.IBancoDao;
import SistemaLoja.database.conexao.SQLServerDao;
import SistemaLoja.model.contato.TelefoneCliente;
import SistemaLoja.model.endereco.Bairro;
import SistemaLoja.model.endereco.Cidade;
import SistemaLoja.model.endereco.Endereco;
import SistemaLoja.model.endereco.Estado;
import SistemaLoja.model.endereco.Residencia;
import SistemaLoja.model.endereco.Rua;
import SistemaLoja.model.pessoa_fisica.Cliente;
import SistemaLoja.utils.Conversor;
import SistemaLoja.utils.Mensagem;
import SistemaLoja.utils.Validador;
import com.microsoft.sqlserver.jdbc.SQLServerAASEnclaveProvider;
import java.sql.Date;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author pedroh
 */
public class TelaDeAtualizacaoDoCliente extends javax.swing.JPanel {
    
    private IBancoDao database;
    private Cliente clienteCadastrado;
    private ArrayList<Estado> estadosDisponiveis;
    private ArrayList<Cliente> clientesDisponiveis;
    

    /**
     * Creates new form CadastroCliente
     */
    public TelaDeAtualizacaoDoCliente() {
        initComponents();
        database = SQLServerDao.getInstance();
        estadosDisponiveis = database.getSelecionarActions().selecionarTodosOsEstados();
        clientesDisponiveis = database.getSelecionarActions().selecionarClientes();
        adicionarEstadosAoComboBox();
        adicionarCLientesAoComboBox();
        btnAtualizarDados.setEnabled(false);
    }
    
    private void adicionarEstadosAoComboBox() {
        for (Estado estado: estadosDisponiveis) {
            comboBoxEstados.addItem(estado.getNome());
        }
    }
    
    private void adicionarCLientesAoComboBox() {
        comboBoxClientes.removeAllItems();
        for (Cliente cliente: clientesDisponiveis) {
            comboBoxClientes.addItem(cliente.getIdCliente()+" - "+cliente.getNome());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbNomeText = new javax.swing.JLabel();
        lbEmailText = new javax.swing.JLabel();
        txtFieldNomeCliente = new javax.swing.JTextField();
        txtFieldEmailCliente = new javax.swing.JTextField();
        btnAtualizarDados = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lbEnderecoText = new javax.swing.JLabel();
        lbCidadeText = new javax.swing.JLabel();
        txtFieldCidade = new javax.swing.JTextField();
        lbBairroText = new javax.swing.JLabel();
        txtFieldBairro = new javax.swing.JTextField();
        txtFieldRua = new javax.swing.JTextField();
        lbRuaText = new javax.swing.JLabel();
        lbNumeroResidenciaText = new javax.swing.JLabel();
        lbDescricaoResidenciaText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaDescricaoResidencia = new javax.swing.JTextArea();
        lbRequiredNomeText = new javax.swing.JLabel();
        lbTelefonePrimeiroText = new javax.swing.JLabel();
        lbTelefoneSegundoText = new javax.swing.JLabel();
        lbRequiredTelefonePrimeiroText = new javax.swing.JLabel();
        lbRequiredCidadeText = new javax.swing.JLabel();
        lbRequiredBairroText = new javax.swing.JLabel();
        lbRequiredRuaText = new javax.swing.JLabel();
        lbRequiredNumeroText = new javax.swing.JLabel();
        lbDataNascimentoText = new javax.swing.JLabel();
        formattxtFieldDataNascimento = new javax.swing.JFormattedTextField();
        lbRequiredDataNascimentoText = new javax.swing.JLabel();
        lbEstadoText = new javax.swing.JLabel();
        lbRequiredEstadoText = new javax.swing.JLabel();
        comboBoxEstados = new javax.swing.JComboBox<>();
        formatTxtFieldTelefonePrimeiro = new javax.swing.JFormattedTextField();
        formatTxtFieldNumeroResidencia = new javax.swing.JFormattedTextField();
        formatTxtFieldTelefoneSegundo = new javax.swing.JFormattedTextField();
        comboBoxClientes = new javax.swing.JComboBox<>();
        lbClienteText = new javax.swing.JLabel();
        btnPreencherCampos = new javax.swing.JButton();
        lbRequiredTelefoneSegundoText = new javax.swing.JLabel();
        btnAtualizarListaDeClientes = new javax.swing.JButton();

        lbNomeText.setText("Nome");

        lbEmailText.setText("Email");

        btnAtualizarDados.setText("Concluir Atualização");
        btnAtualizarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarDadosActionPerformed(evt);
            }
        });

        lbEnderecoText.setText("Endereço");

        lbCidadeText.setText("Cidade");

        lbBairroText.setText("Bairro");

        lbRuaText.setText("Rua");

        lbNumeroResidenciaText.setText("Número da casa");

        lbDescricaoResidenciaText.setText("Descrição");

        txtAreaDescricaoResidencia.setColumns(20);
        txtAreaDescricaoResidencia.setRows(5);
        jScrollPane1.setViewportView(txtAreaDescricaoResidencia);

        lbRequiredNomeText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredNomeText.setText("(Obrigatório)");

        lbTelefonePrimeiroText.setText("Telefone (1)");

        lbTelefoneSegundoText.setText("Telefone (2)");

        lbRequiredTelefonePrimeiroText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredTelefonePrimeiroText.setText("(Obrigatório)");

        lbRequiredCidadeText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredCidadeText.setText("(Obrigatório)");

        lbRequiredBairroText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredBairroText.setText("(Obrigatório)");

        lbRequiredRuaText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredRuaText.setText("(Obrigatório)");

        lbRequiredNumeroText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredNumeroText.setText("(Obrigatório)");

        lbDataNascimentoText.setText("Data de nascimento");

        formattxtFieldDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        formattxtFieldDataNascimento.setToolTipText("ex 12/12/2012");
        formattxtFieldDataNascimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formattxtFieldDataNascimentoActionPerformed(evt);
            }
        });

        lbRequiredDataNascimentoText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredDataNascimentoText.setText("(Obrigatório)");

        lbEstadoText.setText("Estado");

        lbRequiredEstadoText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredEstadoText.setText("(Obrigatório)");

        comboBoxEstados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxEstadosActionPerformed(evt);
            }
        });

        formatTxtFieldTelefonePrimeiro.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        formatTxtFieldTelefonePrimeiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatTxtFieldTelefonePrimeiroActionPerformed(evt);
            }
        });

        formatTxtFieldNumeroResidencia.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        formatTxtFieldNumeroResidencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatTxtFieldNumeroResidenciaActionPerformed(evt);
            }
        });

        formatTxtFieldTelefoneSegundo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        formatTxtFieldTelefoneSegundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatTxtFieldTelefoneSegundoActionPerformed(evt);
            }
        });

        comboBoxClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxClientesActionPerformed(evt);
            }
        });

        lbClienteText.setText("Cliente");

        btnPreencherCampos.setText("Mostrar");
        btnPreencherCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreencherCamposActionPerformed(evt);
            }
        });

        lbRequiredTelefoneSegundoText.setForeground(new java.awt.Color(255, 51, 51));
        lbRequiredTelefoneSegundoText.setText("(Obrigatório)");

        btnAtualizarListaDeClientes.setText("Tem cliente novo?");
        btnAtualizarListaDeClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarListaDeClientesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbEnderecoText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbNumeroResidenciaText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formatTxtFieldNumeroResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbRequiredNumeroText))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbRuaText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtFieldRua, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbBairroText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtFieldBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lbCidadeText)
                                .addGap(18, 18, 18)
                                .addComponent(txtFieldCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbRequiredRuaText)
                            .addComponent(lbRequiredCidadeText)
                            .addComponent(lbRequiredBairroText)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbDescricaoResidenciaText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbEstadoText)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxEstados, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbRequiredEstadoText))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbNomeText)
                            .addComponent(lbEmailText)
                            .addComponent(lbClienteText))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFieldEmailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(comboBoxClientes, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtFieldNomeCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbRequiredNomeText)
                                    .addComponent(btnPreencherCampos))))))
                .addContainerGap(190, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAtualizarListaDeClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtualizarDados, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbDataNascimentoText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(formattxtFieldDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbRequiredDataNascimentoText))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbTelefoneSegundoText)
                                    .addComponent(lbTelefonePrimeiroText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(formatTxtFieldTelefonePrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbRequiredTelefonePrimeiroText))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(formatTxtFieldTelefoneSegundo, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbRequiredTelefoneSegundoText)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbClienteText)
                    .addComponent(btnPreencherCampos))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNomeText)
                    .addComponent(txtFieldNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbRequiredNomeText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEmailText)
                    .addComponent(txtFieldEmailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDataNascimentoText)
                    .addComponent(formattxtFieldDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbRequiredDataNascimentoText))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTelefonePrimeiroText)
                    .addComponent(lbRequiredTelefonePrimeiroText)
                    .addComponent(formatTxtFieldTelefonePrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTelefoneSegundoText)
                    .addComponent(formatTxtFieldTelefoneSegundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbRequiredTelefoneSegundoText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbEnderecoText))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbEstadoText)
                            .addComponent(lbRequiredEstadoText)
                            .addComponent(comboBoxEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCidadeText)
                            .addComponent(txtFieldCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbRequiredCidadeText))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbBairroText)
                            .addComponent(lbRequiredBairroText))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbRuaText)
                            .addComponent(lbRequiredRuaText))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbNumeroResidenciaText)
                            .addComponent(lbRequiredNumeroText)
                            .addComponent(formatTxtFieldNumeroResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDescricaoResidenciaText))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAtualizarDados)
                    .addComponent(btnAtualizarListaDeClientes))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private boolean isAlgumCampoObrigatorioVazio() {
        return 
                Validador.isTextoVazio(txtFieldNomeCliente.getText()) ||
                Validador.isTextoVazio(formattxtFieldDataNascimento.getText()) ||
                Validador.isTextoVazio(formatTxtFieldTelefonePrimeiro.getText()) ||
                Validador.isTextoVazio(formatTxtFieldTelefoneSegundo.getText()) ||
                Validador.isTextoVazio(txtFieldCidade.getText()) ||
                Validador.isTextoVazio(txtFieldBairro.getText()) ||
                Validador.isTextoVazio(txtFieldRua.getText()) ||
                Validador.isTextoVazio(formatTxtFieldNumeroResidencia.getText());
    }
    
    private boolean isNomeComNumeros() {
        return Validador.isNumero(txtFieldNomeCliente.getText());
    }
    
    private ArrayList<TelefoneCliente> gerarTelefonesDoClienteAtualizados() {
        ArrayList<TelefoneCliente> telefones = clienteCadastrado.getTelefones();
        telefones.get(0).setTelefone(formatTxtFieldTelefonePrimeiro.getText());
        telefones.get(1).setTelefone(formatTxtFieldTelefoneSegundo.getText());
        
        return telefones;
    }    
    
    private void atualizarResidenciaDoCliente(Residencia residencia) {
        residencia.setNumero(Integer.parseInt(formatTxtFieldNumeroResidencia.getText()));
        residencia.setDescricao(txtAreaDescricaoResidencia.getText());
    }
    
    private void atualizarRuaDoCliente(Rua rua) {
        rua.setNome(txtFieldRua.getText());
    
    }
    
    private void atualizarBairroDoCliente(Bairro bairro) {
        bairro.setNome(txtFieldBairro.getText());
    }
    
    private void atualizarCidadeDoCliente(Cidade cidade, int idNovoEstado) {
        cidade.setNome(txtFieldCidade.getText());
        cidade.setIdfkEstado(idNovoEstado);
    }
    
    private void atualizarEstadoDoCliente(Estado estado) {
        Estado estadoSelecionado = estadosDisponiveis.get(comboBoxEstados.getSelectedIndex());
        estado.setIdEstado(estadoSelecionado.getIdEstado());
        estado.setNome(estadoSelecionado.getNome());
        estado.setSigla(estadoSelecionado.getSigla());
    }
    
    private Endereco gerarEnderecoDoClienteAtualizado() {
        Endereco enderecoCliente = clienteCadastrado.getEndereco();
        
        Residencia residenciaCliente = enderecoCliente.getResidencia();
        Rua ruaCliente = enderecoCliente.getRua();
        Bairro bairroCliente = enderecoCliente.getBairro();
        Cidade cidadeCliente = enderecoCliente.getCidade();
        Estado estadoCliente = enderecoCliente.getEstado();
        
        atualizarResidenciaDoCliente(residenciaCliente);
        
        atualizarRuaDoCliente(ruaCliente);
        atualizarBairroDoCliente(bairroCliente);
        atualizarEstadoDoCliente(estadoCliente);
        atualizarCidadeDoCliente(cidadeCliente, estadoCliente.getIdEstado());
        
        
        enderecoCliente.setResidencia(residenciaCliente);
        enderecoCliente.setRua(ruaCliente);
        enderecoCliente.setBairro(bairroCliente);
        enderecoCliente.setCidade(cidadeCliente);
        enderecoCliente.setEstado(estadoCliente);
        
        return enderecoCliente;
    }
    
    private boolean isCampoDeContatoValido() {
        if (!Validador.isTelefoneValido(formatTxtFieldTelefonePrimeiro.getText())) {
            Mensagem.mostrarErro("O telefone deve conter apenas numeros e deve possuir de 8 a 11 caracteres.");
            return false;
        }
        return true;
    }
    
    private boolean isCamposDeEnderecoValidos() {
        if (Validador.isNumero(txtFieldCidade.getText())) {
            Mensagem.mostrarErro("O nome da cidade deve ser composta por letras ou letras e números.");
            return false;
        }
        
        if (Validador.isNumero(txtFieldRua.getText())) {
            Mensagem.mostrarErro("O nome da rua deve ser composta por letras ou letras e números.");
            return false;
        }
        
        if (Validador.isNumero(txtFieldBairro.getText())) {
            Mensagem.mostrarErro("O nome do bairro deve ser composta por letras ou letras e números.");
            return false;
        }
        
        if (!(Integer.parseInt(formatTxtFieldNumeroResidencia.getText()) > 0 ))  {
            Mensagem.mostrarErro("O número da residência deve ser um número positivo.");
            return false;
        }
        
        return true;
    }
    
    private boolean isCampoDataDeNascimentoValido() {
        Date dataInformada = Conversor.StringParaData(formattxtFieldDataNascimento.getText());
        if (!Validador.isDataDeNascimentoValida(dataInformada)) {
            Mensagem.mostrarErro("Data de nascimento invalida");
            return false;
        }
        
        return true;
    }
    
    private boolean isTodosOsCamposObrigatoriosValidos() {
        if (isAlgumCampoObrigatorioVazio()) {
            Mensagem.mostrarErro("Você deve preencher todos os campos marcados em vermelho.");
            return false;
        }
        
        if (isNomeComNumeros()) {
            Mensagem.mostrarErro("O nome deve conter apenas letras.");
            return false;
        }
        
        if (!isCamposDeEnderecoValidos()) {
            return false;
        }
        
        if (!isCampoDeContatoValido()) {
            return false;
        }
        
        if(!isCampoDataDeNascimentoValido()) {
            return false;
        }
        
        return true;
    }
    
    private void vincularCamposComCliente() {
        clienteCadastrado.setNome(txtFieldNomeCliente.getText());
        clienteCadastrado.setEndereco(gerarEnderecoDoClienteAtualizado());
        clienteCadastrado.setEmail(txtFieldEmailCliente.getText());
        clienteCadastrado.setDataNascimento(Conversor.StringParaData(formattxtFieldDataNascimento.getText()));
        clienteCadastrado.setTelefones(gerarTelefonesDoClienteAtualizados());
    }
    
    private boolean atualizarCamposDeEnderecoNoBanco() {
        Endereco enderecoDoCliente = clienteCadastrado.getEndereco();
        
        boolean isAtualizacaoResidenciaConcluida = database
                .getAtualizarActions()
                .atualizarResidencia(enderecoDoCliente.getResidencia());
        
        boolean isAtualizacaoRuaConcluida = database
                .getAtualizarActions()
                .atualizarRua(enderecoDoCliente.getRua());
        
        boolean isAtualizacaoBairroConcluida = database
                .getAtualizarActions()
                .atualizarBairro(enderecoDoCliente.getBairro());
        
        boolean isAtualizacaoCidadeConcluida = database
                .getAtualizarActions()
                .atualizarCidade(enderecoDoCliente.getCidade());
        
        return isAtualizacaoResidenciaConcluida &&
               isAtualizacaoBairroConcluida &&
               isAtualizacaoRuaConcluida &&
               isAtualizacaoCidadeConcluida;
    }
    
    private boolean atualizarTelefonesNoBanco() {
        boolean isAtualizacaoTelefonesConcluida = true;
        for (TelefoneCliente telefoneCliente: clienteCadastrado.getTelefones()) {
            isAtualizacaoTelefonesConcluida = isAtualizacaoTelefonesConcluida &&
                    database.getAtualizarActions().atualizarTelefoneCliente(telefoneCliente);
        }
        
        return isAtualizacaoTelefonesConcluida;
    }
    
    private boolean atualizarInformacoesDoCliente() {
        return database.getAtualizarActions().atualizarCliente(clienteCadastrado);
    }

    private void atualizarCliente() {
        
        if (!atualizarInformacoesDoCliente()) {
            Mensagem.mostrarErro("Erro ao atualizar os campos de endereço");
            return;
        } 

        if (!atualizarCamposDeEnderecoNoBanco()) {
            Mensagem.mostrarErro("Erro ao atualizar os campos de endereço");
            return;
        }
        
        if (!atualizarTelefonesNoBanco()) {   
            Mensagem.mostrarErro("Erro ao atualizar os campos de endereço");
            return;
        }
        
        Mensagem.mostrarSucesso("Cliente atualizado.");
        
        clientesDisponiveis = database.getSelecionarActions().selecionarClientes();
        adicionarCLientesAoComboBox();
    }
    
    private void btnAtualizarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarDadosActionPerformed
        // TODO add your handling code here:
        if(isTodosOsCamposObrigatoriosValidos()) {
            vincularCamposComCliente();
            atualizarCliente();
        }
    }//GEN-LAST:event_btnAtualizarDadosActionPerformed

    private void formattxtFieldDataNascimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formattxtFieldDataNascimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formattxtFieldDataNascimentoActionPerformed

    private void comboBoxEstadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxEstadosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxEstadosActionPerformed

    private void formatTxtFieldTelefonePrimeiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatTxtFieldTelefonePrimeiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatTxtFieldTelefonePrimeiroActionPerformed

    private void formatTxtFieldNumeroResidenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatTxtFieldNumeroResidenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatTxtFieldNumeroResidenciaActionPerformed

    private void formatTxtFieldTelefoneSegundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatTxtFieldTelefoneSegundoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatTxtFieldTelefoneSegundoActionPerformed
    
    private void preencherCamposDeEnderecoDoCliente() {
        Endereco enderecoCliente = clienteCadastrado.getEndereco();
        
        comboBoxEstados.setSelectedItem(enderecoCliente.getEstado().getNome());
        txtFieldCidade.setText(enderecoCliente.getCidade().getNome());
        txtFieldBairro.setText(enderecoCliente.getBairro().getNome());
        txtFieldRua.setText(enderecoCliente.getRua().getNome());
        formatTxtFieldNumeroResidencia.setText(String.valueOf(enderecoCliente.getResidencia().getNumero()));
        txtAreaDescricaoResidencia.setText(enderecoCliente.getResidencia().getDescricao());    
    }
    
    private void preencherCamposDeContato() {
        txtFieldEmailCliente.setText(clienteCadastrado.getEmail());
        formatTxtFieldTelefonePrimeiro.setText(String.valueOf(clienteCadastrado.getTelefones().get(0).getTelefone()));
        if (clienteCadastrado.getTelefones().size() > 1) {
            formatTxtFieldTelefoneSegundo.setText(String.valueOf(clienteCadastrado.getTelefones().get(1).getTelefone()));
        }    
    }
    
    private void preencherInformacoesPessoaisDoCliente() {
        txtFieldNomeCliente.setText(clienteCadastrado.getNome());
        formattxtFieldDataNascimento.setText(Conversor.dateToString(clienteCadastrado.getDataNascimento()));    
        preencherCamposDeContato();
        preencherCamposDeEnderecoDoCliente();
    }
    
    
    private void inserirInformacoesDoClienteNaTela() {
        preencherInformacoesPessoaisDoCliente();
    }
    
    private void btnPreencherCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreencherCamposActionPerformed
        // TODO add your handling code here:
        if (clientesDisponiveis.size() > 0) {
            clienteCadastrado = clientesDisponiveis.get(comboBoxClientes.getSelectedIndex());
            inserirInformacoesDoClienteNaTela();            
            btnAtualizarDados.setEnabled(true);
        } else {
            Mensagem.mostrarErro("Não existem clientes a serem atualizados.");
        }

    }//GEN-LAST:event_btnPreencherCamposActionPerformed

    private void comboBoxClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxClientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxClientesActionPerformed

    private void btnAtualizarListaDeClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarListaDeClientesActionPerformed
        // TODO add your handling code here:
        int tamanhoAntigo = clientesDisponiveis.size();
        clientesDisponiveis = database.getSelecionarActions().selecionarClientes();
        adicionarCLientesAoComboBox();
        int tamanhoNovo = clientesDisponiveis.size();
        int quantidadeNovosClientes = tamanhoNovo - tamanhoAntigo;
        if (quantidadeNovosClientes < 0) {
            Mensagem.mostrarSucesso(Math.abs(quantidadeNovosClientes)+" foram removidos.");
        } else if (quantidadeNovosClientes > 0) {
            Mensagem.mostrarSucesso(Math.abs(quantidadeNovosClientes)+" foram adicionados.");        
        } else {
            Mensagem.mostrarSucesso("Nenhuma alteração.");
        }                
    }//GEN-LAST:event_btnAtualizarListaDeClientesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizarDados;
    private javax.swing.JButton btnAtualizarListaDeClientes;
    private javax.swing.JButton btnPreencherCampos;
    private javax.swing.JComboBox<String> comboBoxClientes;
    private javax.swing.JComboBox<String> comboBoxEstados;
    private javax.swing.JFormattedTextField formatTxtFieldNumeroResidencia;
    private javax.swing.JFormattedTextField formatTxtFieldTelefonePrimeiro;
    private javax.swing.JFormattedTextField formatTxtFieldTelefoneSegundo;
    private javax.swing.JFormattedTextField formattxtFieldDataNascimento;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbBairroText;
    private javax.swing.JLabel lbCidadeText;
    private javax.swing.JLabel lbClienteText;
    private javax.swing.JLabel lbDataNascimentoText;
    private javax.swing.JLabel lbDescricaoResidenciaText;
    private javax.swing.JLabel lbEmailText;
    private javax.swing.JLabel lbEnderecoText;
    private javax.swing.JLabel lbEstadoText;
    private javax.swing.JLabel lbNomeText;
    private javax.swing.JLabel lbNumeroResidenciaText;
    private javax.swing.JLabel lbRequiredBairroText;
    private javax.swing.JLabel lbRequiredCidadeText;
    private javax.swing.JLabel lbRequiredDataNascimentoText;
    private javax.swing.JLabel lbRequiredEstadoText;
    private javax.swing.JLabel lbRequiredNomeText;
    private javax.swing.JLabel lbRequiredNumeroText;
    private javax.swing.JLabel lbRequiredRuaText;
    private javax.swing.JLabel lbRequiredTelefonePrimeiroText;
    private javax.swing.JLabel lbRequiredTelefoneSegundoText;
    private javax.swing.JLabel lbRuaText;
    private javax.swing.JLabel lbTelefonePrimeiroText;
    private javax.swing.JLabel lbTelefoneSegundoText;
    private javax.swing.JTextArea txtAreaDescricaoResidencia;
    private javax.swing.JTextField txtFieldBairro;
    private javax.swing.JTextField txtFieldCidade;
    private javax.swing.JTextField txtFieldEmailCliente;
    private javax.swing.JTextField txtFieldNomeCliente;
    private javax.swing.JTextField txtFieldRua;
    // End of variables declaration//GEN-END:variables
}
