/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SistemaLoja.view.atualizacao.produto;

import SistemaLoja.view.cadastro.produto.*;
import SistemaLoja.database.conexao.IBancoDao;
import SistemaLoja.database.conexao.SQLServerDao;
import SistemaLoja.model.produtos.Distribuidor;
import SistemaLoja.model.produtos.Produto;
import SistemaLoja.utils.Conversor;
import SistemaLoja.utils.Mensagem;
import SistemaLoja.utils.Validador;
import java.sql.Date;
import java.util.ArrayList;

/**
 *
 * @author pedroh
 */
public class TelaDeAtualizacaoDoProduto extends javax.swing.JPanel {
    
    private IBancoDao database;
    private Produto produtoCadastrado;
    private ArrayList<Distribuidor> distribuidoresDisponiveis;
    private ArrayList<Produto> produtosDisponiveis;

    /**
     * Creates new form TelaDeCadastroDoProduto
     */
    public TelaDeAtualizacaoDoProduto() {
        initComponents();
        database = SQLServerDao.getInstance();
        distribuidoresDisponiveis = database.getSelecionarActions().selecionarDistribuidores();
        adicionarDistribuidoresAoComboBox();
        produtosDisponiveis = database.getSelecionarActions().selecionarProdutos();
        adicionarProdutosAoComboBox();
        btnConcluirAtualizacao.setEnabled(false);
    }
    
    private void adicionarDistribuidoresAoComboBox() {
        comboBoxDistribuidor.removeAllItems();
        for (Distribuidor distribuidor: distribuidoresDisponiveis) {
            comboBoxDistribuidor.addItem(distribuidor.getNomeFantasia());
        }
    }
    
    private void adicionarProdutosAoComboBox() {
        comboBoxProdutos.removeAllItems();
        for (Produto produto: produtosDisponiveis) {
            comboBoxProdutos.addItem(produto.getIdProduto()+" - "+produto.getDescricao());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxDistribuidor = new javax.swing.JComboBox<>();
        lbDistribuidorText = new javax.swing.JLabel();
        lbProdutoText = new javax.swing.JLabel();
        lbDescricaoText = new javax.swing.JLabel();
        txtFieldDescricao = new javax.swing.JTextField();
        formatTxtFieldPrecoVenda = new javax.swing.JFormattedTextField();
        lbPrecoVendaText = new javax.swing.JLabel();
        lbPrecoCompraText = new javax.swing.JLabel();
        formatTxtFieldPrecoCompra = new javax.swing.JFormattedTextField();
        formatTxtFieldValidade = new javax.swing.JFormattedTextField();
        lbValidadeText = new javax.swing.JLabel();
        btnConcluirAtualizacao = new javax.swing.JButton();
        lbObrigatorioValidadeText = new javax.swing.JLabel();
        lbObrigatorioPrecoCompraText = new javax.swing.JLabel();
        lbObrigatorioPrecoVendaText = new javax.swing.JLabel();
        lbObrigatorioDescricaoText = new javax.swing.JLabel();
        lbObrigatorioDistribuidorText = new javax.swing.JLabel();
        lbEstoque = new javax.swing.JLabel();
        formatTxtFieldEstoque = new javax.swing.JFormattedTextField();
        lbObrigatorioEstoqueText1 = new javax.swing.JLabel();
        comboBoxProdutos = new javax.swing.JComboBox<>();
        btnMostrarProduto = new javax.swing.JButton();
        btnAtualizarListaDeProdutos = new javax.swing.JButton();
        btnAtualizarListaDeDistribuidores = new javax.swing.JButton();

        lbDistribuidorText.setText("Distribuidor");

        lbProdutoText.setText("Produto");

        lbDescricaoText.setText("Descrição");

        txtFieldDescricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldDescricaoActionPerformed(evt);
            }
        });

        formatTxtFieldPrecoVenda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        formatTxtFieldPrecoVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatTxtFieldPrecoVendaActionPerformed(evt);
            }
        });

        lbPrecoVendaText.setText("Preço venda");

        lbPrecoCompraText.setText("Preço compra");

        formatTxtFieldPrecoCompra.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        formatTxtFieldPrecoCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatTxtFieldPrecoCompraActionPerformed(evt);
            }
        });

        formatTxtFieldValidade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        formatTxtFieldValidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatTxtFieldValidadeActionPerformed(evt);
            }
        });

        lbValidadeText.setText("Data de validade");

        btnConcluirAtualizacao.setText("Concluir Atualização");
        btnConcluirAtualizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConcluirAtualizacaoActionPerformed(evt);
            }
        });

        lbObrigatorioValidadeText.setForeground(new java.awt.Color(255, 51, 51));
        lbObrigatorioValidadeText.setText("Obrigatório");

        lbObrigatorioPrecoCompraText.setForeground(new java.awt.Color(255, 51, 51));
        lbObrigatorioPrecoCompraText.setText("Obrigatório");

        lbObrigatorioPrecoVendaText.setForeground(new java.awt.Color(255, 51, 51));
        lbObrigatorioPrecoVendaText.setText("Obrigatório");

        lbObrigatorioDescricaoText.setForeground(new java.awt.Color(255, 51, 51));
        lbObrigatorioDescricaoText.setText("Obrigatório");

        lbObrigatorioDistribuidorText.setForeground(new java.awt.Color(255, 51, 51));
        lbObrigatorioDistribuidorText.setText("Obrigatório");

        lbEstoque.setText("Estoque");

        formatTxtFieldEstoque.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        lbObrigatorioEstoqueText1.setForeground(new java.awt.Color(255, 51, 51));
        lbObrigatorioEstoqueText1.setText("Obrigatório");

        comboBoxProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxProdutosActionPerformed(evt);
            }
        });

        btnMostrarProduto.setText("Mostrar");
        btnMostrarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarProdutoActionPerformed(evt);
            }
        });

        btnAtualizarListaDeProdutos.setText("Tem novos produtos?");
        btnAtualizarListaDeProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarListaDeProdutosActionPerformed(evt);
            }
        });

        btnAtualizarListaDeDistribuidores.setText("Tem novos distribuidores?");
        btnAtualizarListaDeDistribuidores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarListaDeDistribuidoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAtualizarListaDeProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                        .addComponent(btnConcluirAtualizacao, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbDistribuidorText)
                                    .addComponent(lbDescricaoText))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFieldDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxDistribuidor, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbObrigatorioDescricaoText)
                                    .addComponent(lbObrigatorioDistribuidorText)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lbPrecoVendaText)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(formatTxtFieldPrecoVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbPrecoCompraText)
                                            .addComponent(lbValidadeText)
                                            .addComponent(lbEstoque)
                                            .addComponent(lbProdutoText))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(formatTxtFieldValidade)
                                            .addComponent(formatTxtFieldPrecoCompra, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(formatTxtFieldEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lbObrigatorioEstoqueText1))
                                            .addComponent(comboBoxProdutos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbObrigatorioValidadeText)
                                    .addComponent(lbObrigatorioPrecoCompraText)
                                    .addComponent(lbObrigatorioPrecoVendaText)
                                    .addComponent(btnMostrarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnAtualizarListaDeDistribuidores, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbProdutoText)
                    .addComponent(comboBoxProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMostrarProduto))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEstoque)
                    .addComponent(formatTxtFieldEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbObrigatorioEstoqueText1))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatTxtFieldValidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbValidadeText)
                    .addComponent(lbObrigatorioValidadeText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPrecoCompraText)
                    .addComponent(formatTxtFieldPrecoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbObrigatorioPrecoCompraText))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPrecoVendaText)
                    .addComponent(formatTxtFieldPrecoVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbObrigatorioPrecoVendaText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbDescricaoText)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboBoxDistribuidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbObrigatorioDistribuidorText))
                            .addComponent(lbDistribuidorText)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFieldDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbObrigatorioDescricaoText)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(btnAtualizarListaDeDistribuidores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConcluirAtualizacao)
                    .addComponent(btnAtualizarListaDeProdutos))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private boolean isAlgumCampoObrigatorioVazio() {
        return 
                Validador.isTextoVazio(formatTxtFieldEstoque.getText()) ||
                Validador.isTextoVazio(formatTxtFieldValidade.getText()) ||
                Validador.isTextoVazio(formatTxtFieldPrecoCompra.getText()) ||
                Validador.isTextoVazio(formatTxtFieldPrecoVenda.getText()) ||
                Validador.isTextoVazio(txtFieldDescricao.getText());
    }
    
    private boolean isPrecoMaiorQueZero(float preco) {
        return preco > 0F;
    }
    
    private float converterPrecoFormatFieldParaFloat(String text) {
        return Float.parseFloat(text.replace(',', '.'));
    }
    
    private boolean isPrecosInseridosValidos() {
        float precoCompra = converterPrecoFormatFieldParaFloat(formatTxtFieldPrecoCompra.getText());
        float precoVenda = converterPrecoFormatFieldParaFloat(formatTxtFieldPrecoVenda.getText().replace(',', '.'));
        
        if (!isPrecoMaiorQueZero(precoCompra)) {
            Mensagem.mostrarErro("O valor de preco compra não pode ser menor ou igual a zero");
            return false;
        }
        
        if (!isPrecoMaiorQueZero(precoVenda)) {
            Mensagem.mostrarErro("O valor de preco venda não pode ser menor ou igual a zero");        
            return false;
        }
        
        return true;
    }
    
    private boolean isEstoqueValido() {
        int estoque = Integer.parseInt(formatTxtFieldEstoque.getText());
        
        if (estoque <= 0) {
            Mensagem.mostrarErro("Valor de estoque inválido.");
            return false;
        }
        
        return true;
    }
    
    private boolean isDataValidadeValida() {
        Date dataValidadeInserida = Conversor.StringParaData(formatTxtFieldValidade.getText());
        if(!Validador.isDataDeValidadeValida(dataValidadeInserida)) {
            Mensagem.mostrarErro("Cadastro de produtos vencidos não são permitidos.");
            return false;
        }
        
        return true;
    }
    
    private boolean isDescricaoValida() {
        if (Validador.isNumero(txtFieldDescricao.getText())) {
            Mensagem.mostrarErro("A descrição não pode ser composta por apenas números.");
            return false;
        }
        
        return true;
    }
    
    private boolean isTodosOsCamposObrigatoriosValidos() {
        if (isAlgumCampoObrigatorioVazio()) {
            Mensagem.mostrarErro("Todos os campos com obrigatório devem ser preenchidos.");
            return false;
        }
        
        if (!isPrecosInseridosValidos()) {
            return false;
        }
        
        if (!isEstoqueValido()) {
            return false;
        }
        
        if(!isDataValidadeValida()) {
            return false;
        }
        
        if (!isDescricaoValida()) {
            return false;
        }
        
        return true;
    }
    
    private void atualizarProduto() {
        produtoCadastrado.setEstoque(Integer.parseInt(formatTxtFieldEstoque.getText()));
        produtoCadastrado.setIdfkDistribuidor(distribuidoresDisponiveis.get(comboBoxDistribuidor.getSelectedIndex()).getIdDistribuidor());
        produtoCadastrado.setDescricao(txtFieldDescricao.getText());
        produtoCadastrado.setDataValidade(Conversor.StringParaData(formatTxtFieldValidade.getText()));
        produtoCadastrado.setPrecoCusto(Float.parseFloat(formatTxtFieldPrecoCompra.getText().replace(',', '.')));
        produtoCadastrado.setPrecoVenda(Float.parseFloat(formatTxtFieldPrecoVenda.getText().replace(',', '.')));
        
        boolean isProdutoAtualizado = database.getAtualizarActions().atualizarProduto(produtoCadastrado);
        if (isProdutoAtualizado) {
            Mensagem.mostrarSucesso("Produto atualizado.");
        } else {
            Mensagem.mostrarErro("Falha ao atualizar o produto");
        }
        
        produtosDisponiveis = database.getSelecionarActions().selecionarProdutos();
        adicionarProdutosAoComboBox();
    } 
    
    private void formatTxtFieldPrecoVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatTxtFieldPrecoVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatTxtFieldPrecoVendaActionPerformed

    private void formatTxtFieldPrecoCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatTxtFieldPrecoCompraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatTxtFieldPrecoCompraActionPerformed

    private void txtFieldDescricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldDescricaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldDescricaoActionPerformed

    private void formatTxtFieldValidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatTxtFieldValidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatTxtFieldValidadeActionPerformed

    private void btnConcluirAtualizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConcluirAtualizacaoActionPerformed
        // TODO add your handling code here:
        if (distribuidoresDisponiveis.size() < 1) {
            Mensagem.mostrarErro("Não existem distribuidores cadastrados.");
            return;
        }
        
        if (isTodosOsCamposObrigatoriosValidos()) {
            atualizarProduto();
        }
    }//GEN-LAST:event_btnConcluirAtualizacaoActionPerformed

    private void comboBoxProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxProdutosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxProdutosActionPerformed

    private void preencherCampos() {
        produtoCadastrado = produtosDisponiveis.get(comboBoxProdutos.getSelectedIndex());
        formatTxtFieldEstoque.setText(String.valueOf(produtoCadastrado.getEstoque()));
        formatTxtFieldPrecoCompra.setText(Float.toString(produtoCadastrado.getPrecoCusto()));
        formatTxtFieldPrecoVenda.setText(Float.toString(produtoCadastrado.getPrecoVenda()));
        formatTxtFieldValidade.setText(Conversor.dateToString(produtoCadastrado.getDataValidade()));
        txtFieldDescricao.setText(produtoCadastrado.getDescricao());
        
        for (Distribuidor distribuidor: distribuidoresDisponiveis) {
            if (distribuidor.getIdDistribuidor() == produtoCadastrado.getIdfkDistribuidor()) {
                comboBoxDistribuidor.setSelectedItem(distribuidor.getNomeFantasia());
                break;
            }
        }
    }
    
    private void btnMostrarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarProdutoActionPerformed
        // TODO add your handling code here:
        if (produtosDisponiveis.size() > 0) {
            preencherCampos();
            btnConcluirAtualizacao.setEnabled(true);
        } else {
            Mensagem.mostrarErro("Não existem produtos cadastros no sistema.");
        }
        
    }//GEN-LAST:event_btnMostrarProdutoActionPerformed

    private void btnAtualizarListaDeProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarListaDeProdutosActionPerformed
        // TODO add your handling code here:
        int tamanhoAntigo = produtosDisponiveis.size();
        produtosDisponiveis = database.getSelecionarActions().selecionarProdutos();
        adicionarProdutosAoComboBox();
        int tamanhoNovo = produtosDisponiveis.size();
        int quantidadeNovosProdutos = tamanhoNovo - tamanhoAntigo;
        if (quantidadeNovosProdutos < 0) {
            Mensagem.mostrarSucesso(Math.abs(quantidadeNovosProdutos)+" foram removidos.");
        } else if (quantidadeNovosProdutos > 0) {
            Mensagem.mostrarSucesso(Math.abs(quantidadeNovosProdutos)+" foram adicionados.");        
        } else {
            Mensagem.mostrarSucesso("Nenhuma alteração.");
        }
        
    }//GEN-LAST:event_btnAtualizarListaDeProdutosActionPerformed

    private void btnAtualizarListaDeDistribuidoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarListaDeDistribuidoresActionPerformed
        // TODO add your handling code here:
        int tamanhoAntigo = distribuidoresDisponiveis.size();
        distribuidoresDisponiveis = database.getSelecionarActions().selecionarDistribuidores();
        adicionarDistribuidoresAoComboBox();
        int tamanhoNovo = distribuidoresDisponiveis.size();
        int quantidadeNovosDistribuidores = tamanhoNovo - tamanhoAntigo;
        if (quantidadeNovosDistribuidores < 0) {
            Mensagem.mostrarSucesso(Math.abs(quantidadeNovosDistribuidores)+" foram removidos.");
        } else if (quantidadeNovosDistribuidores > 0) {
            Mensagem.mostrarSucesso(Math.abs(quantidadeNovosDistribuidores)+" foram adicionados.");        
        } else {
            Mensagem.mostrarSucesso("Nenhuma alteração.");
        }        
        
    }//GEN-LAST:event_btnAtualizarListaDeDistribuidoresActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizarListaDeDistribuidores;
    private javax.swing.JButton btnAtualizarListaDeProdutos;
    private javax.swing.JButton btnConcluirAtualizacao;
    private javax.swing.JButton btnMostrarProduto;
    private javax.swing.JComboBox<String> comboBoxDistribuidor;
    private javax.swing.JComboBox<String> comboBoxProdutos;
    private javax.swing.JFormattedTextField formatTxtFieldEstoque;
    private javax.swing.JFormattedTextField formatTxtFieldPrecoCompra;
    private javax.swing.JFormattedTextField formatTxtFieldPrecoVenda;
    private javax.swing.JFormattedTextField formatTxtFieldValidade;
    private javax.swing.JLabel lbDescricaoText;
    private javax.swing.JLabel lbDistribuidorText;
    private javax.swing.JLabel lbEstoque;
    private javax.swing.JLabel lbObrigatorioDescricaoText;
    private javax.swing.JLabel lbObrigatorioDistribuidorText;
    private javax.swing.JLabel lbObrigatorioEstoqueText1;
    private javax.swing.JLabel lbObrigatorioPrecoCompraText;
    private javax.swing.JLabel lbObrigatorioPrecoVendaText;
    private javax.swing.JLabel lbObrigatorioValidadeText;
    private javax.swing.JLabel lbPrecoCompraText;
    private javax.swing.JLabel lbPrecoVendaText;
    private javax.swing.JLabel lbProdutoText;
    private javax.swing.JLabel lbValidadeText;
    private javax.swing.JTextField txtFieldDescricao;
    // End of variables declaration//GEN-END:variables
}
